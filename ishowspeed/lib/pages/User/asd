// First create these model classes in separate files


// Main UserHomePage code
class UserHomePage extends StatefulWidget {
  @override
  _UserHomePageState createState() => _UserHomePageState();
}

class _UserHomePageState extends State<UserHomePage> {
  int _selectedIndex = 0;
  User? _currentUser;
  UserModel? _userModel;

  @override
  void initState() {
    super.initState();
    _initializeUser();
  }

  Future<void> _initializeUser() async {
    FirebaseAuth.instance.authStateChanges().listen((User? user) async {
      if (user != null) {
        setState(() => _currentUser = user);
        await _fetchUserData();
      }
    });
  }

  Future<void> _fetchUserData() async {
    if (_currentUser != null) {
      DocumentSnapshot<Map<String, dynamic>> userDoc = await FirebaseFirestore
          .instance
          .collection('users')
          .doc(_currentUser!.uid)
          .get();
      
      if (userDoc.exists) {
        setState(() {
          _userModel = UserModel.fromMap({
            'id': userDoc.id,
            ...userDoc.data()!,
          });
        });
      }
    }
  }

  final List<Widget> _pages = [
    UserDashboard(),
    ProfilePage(),
    UserHistoryPage(),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF890E1C),
      appBar: AppBar(
        backgroundColor: const Color(0xFF890E1C),
        automaticallyImplyLeading: false,
        actions: [
          if (_userModel != null)
            Padding(
              padding: const EdgeInsets.only(right: 16.0),
              child: Row(
                children: [
                  Text(
                    _userModel!.name,
                    style: const TextStyle(
                      color: Colors.white,
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(width: 15),
                  _userModel!.imageUrl.isNotEmpty
                      ? CircleAvatar(
                          backgroundImage: NetworkImage(_userModel!.imageUrl),
                          radius: 30,
                        )
                      : const CircleAvatar(
                          backgroundColor: Colors.white,
                          radius: 30,
                          child: Icon(Icons.person,
                              color: Color(0xFF890E1C), size: 30),
                        ),
                ],
              ),
            ),
        ],
      ),
      body: _pages[_selectedIndex],
      bottomNavigationBar: BottomNavigationBar(
        // ... (bottom navigation bar code remains the same)
      ),
    );
  }
}

// UserDashboard with updated Sender functionality
class UserDashboard extends StatefulWidget {
  @override
  _UserDashboardState createState() => _UserDashboardState();
}

class _UserDashboardState extends State<UserDashboard> {
  final MapController mapController = MapController();
  final TextEditingController searchController = TextEditingController();
  UserModel? selectedReceiver;
  List<UserModel> receivers = [];
  List<Marker> shipmentMarkers = [];
  
  @override
  void initState() {
    super.initState();
    _loadReceivers();
    _setupShipmentListener();
  }

  Future<void> _loadReceivers() async {
    final querySnapshot = await FirebaseFirestore.instance
        .collection('users')
        .where('role', isEqualTo: 'receiver')
        .get();

    setState(() {
      receivers = querySnapshot.docs
          .map((doc) => UserModel.fromMap({
                'id': doc.id,
                ...doc.data(),
              }))
          .toList();
    });
  }

  void _setupShipmentListener() {
    final user = FirebaseAuth.instance.currentUser;
    if (user != null) {
      FirebaseFirestore.instance
          .collection('shipments')
          .where('senderId', isEqualTo: user.uid)
          .snapshots()
          .listen((snapshot) {
        _updateShipmentMarkers(snapshot.docs);
      });
    }
  }

  void _updateShipmentMarkers(List<DocumentSnapshot> shipments) {
    setState(() {
      shipmentMarkers = shipments.map((doc) {
        final shipment = ShipmentModel.fromMap({
          'id': doc.id,
          ...doc.data() as Map<String, dynamic>,
        });
        return Marker(
          point: LatLng(shipment.latitude, shipment.longitude),
          builder: (context) => Icon(
            Icons.location_on,
            color: _getStatusColor(shipment.status),
            size: 30,
          ),
        );
      }).toList();
    });
  }

  Color _getStatusColor(ShipmentStatus status) {
    switch (status) {
      case ShipmentStatus.pending:
        return Colors.orange;
      case ShipmentStatus.inTransit:
        return Colors.blue;
      case ShipmentStatus.delivered:
        return Colors.green;
    }
  }

  Future<void> _searchReceiver(String phone) async {
    if (phone.isEmpty) return;

    final querySnapshot = await FirebaseFirestore.instance
        .collection('users')
        .where('phone', isEqualTo: phone)
        .where('role', isEqualTo: 'receiver')
        .get();

    if (querySnapshot.docs.isNotEmpty) {
      setState(() {
        selectedReceiver = UserModel.fromMap({
          'id': querySnapshot.docs.first.id,
          ...querySnapshot.docs.first.data(),
        });
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Expanded(
          child: FlutterMap(
            mapController: mapController,
            options: MapOptions(
              center: LatLng(13.7563, 100.5018), // Bangkok coordinates
              zoom: 10.0,
            ),
            children: [
              TileLayer(
                urlTemplate: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
                subdomains: ['a', 'b', 'c'],
              ),
              MarkerLayer(markers: shipmentMarkers),
            ],
          ),
        ),
        Padding(
          padding: const EdgeInsets.all(16.0),
          child: ElevatedButton(
            onPressed: () => _showAddShipmentDialog(context),
            child: const Text('Add New Shipment'),
            style: ElevatedButton.styleFrom(
              backgroundColor: const Color(0xFFAB000D),
              foregroundColor: Colors.white,
            ),
          ),
        ),
      ],
    );
  }

  void _showAddShipmentDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AddShipmentDialog(
        receivers: receivers,
        onSearch: _searchReceiver,
        selectedReceiver: selectedReceiver,
      ),
    );
  }
}

// Add this new dialog widget
class AddShipmentDialog extends StatefulWidget {
  final List<UserModel> receivers;
  final Function(String) onSearch;
  final UserModel? selectedReceiver;

  const AddShipmentDialog({
    Key? key,
    required this.receivers,
    required this.onSearch,
    this.selectedReceiver,
  }) : super(key: key);

  @override
  _AddShipmentDialogState createState() => _AddShipmentDialogState();
}

class _AddShipmentDialogState extends State<AddShipmentDialog> {
  final _formKey = GlobalKey<FormState>();
  final ImagePicker _picker = ImagePicker();
  XFile? _imageFile;
  UserModel? _selectedReceiver;
  final TextEditingController _searchController = TextEditingController();
  
  String? _productName;
  String? _productDetails;
  int? _numberOfProducts;
  String? _imageUrl;

  @override
  void initState() {
    super.initState();
    _selectedReceiver = widget.selectedReceiver;
  }

  Future<void> _pickImage() async {
    final XFile? image = await _picker.pickImage(
      source: ImageSource.camera,
      maxWidth: 1800,
      maxHeight: 1800,
    );
    if (image != null) {
      setState(() => _imageFile = image);
    }
  }

  Future<void> _uploadImage() async {
    if (_imageFile != null) {
      final storageRef = FirebaseStorage.instance
          .ref('shipment_images/${DateTime.now().millisecondsSinceEpoch}.jpg');
      await storageRef.putFile(File(_imageFile!.path));
      _imageUrl = await storageRef.getDownloadURL();
    }
  }

  Future<void> _createShipment() async {
    if (!_formKey.currentState!.validate() || _selectedReceiver == null) return;

    _formKey.currentState!.save();
    await _uploadImage();

    final user = FirebaseAuth.instance.currentUser;
    if (user == null) return;

    final shipmentData = {
      'senderId': user.uid,
      'receiverId': _selectedReceiver!.id,
      'productName': _productName,
      'productDetails': _productDetails,
      'numberOfProducts': _numberOfProducts,
      'imageUrl': _imageUrl,
      'shippingAddress': _selectedReceiver!.address,
      'latitude': _selectedReceiver!.latitude,
      'longitude': _selectedReceiver!.longitude,
      'status': ShipmentStatus.pending.index,
      'createdAt': FieldValue.serverTimestamp(),
    };

    try {
      await FirebaseFirestore.instance.collection('shipments').add(shipmentData);
      Navigator.of(context).pop();
    } catch (e) {
      print('Error creating shipment: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Dialog(
      child: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Form(
            key: _formKey,
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TextFormField(
                  controller: _searchController,
                  decoration: InputDecoration(
                    labelText: 'Search receiver by phone',
                    suffixIcon: IconButton(
                      icon: Icon(Icons.search),
                      onPressed: () => widget.onSearch(_searchController.text),
                    ),
                  ),
                ),
                if (widget.receivers.isNotEmpty)
                  DropdownButtonFormField<UserModel>(
                    value: _selectedReceiver,
                    items: widget.receivers.map((receiver) {
                      return DropdownMenuItem(
                        value: receiver,
                        child: Text('${receiver.name} (${receiver.phone})'),
                      );
                    }).toList(),
                    onChanged: (value) {
                      setState(() => _selectedReceiver = value);
                    },
                    decoration: InputDecoration(labelText: 'Select Receiver'),
                  ),
                if (_selectedReceiver != null) ...[
                  Text('Receiver Details:'),
                  Text('Name: ${_selectedReceiver!.name}'),
                  Text('Address: ${_selectedReceiver!.address}'),
                  Text('Phone: ${_selectedReceiver!.phone}'),
                  SizedBox(
                    height: 200,
                    child: FlutterMap(
                      options: MapOptions(
                        center: LatLng(_selectedReceiver!.latitude,
                            _selectedReceiver!.longitude),
                        zoom: 15.0,
                      ),
                      children: [
                        TileLayer(
                          urlTemplate:
                              'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
                          subdomains: ['a', 'b', 'c'],
                        ),
                        MarkerLayer(
                          markers: [
                            Marker(
                              point: LatLng(_selectedReceiver!.latitude,
                                  _selectedReceiver!.longitude),
                              builder: (context) =>
                                  Icon(Icons.location_on, color: Colors.red),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                ],
                TextFormField(
                  decoration: InputDecoration(labelText: 'Product Name'),
                  validator: (value) =>
                      value?.isEmpty ?? true ? 'Required field' : null,
                  onSaved: (value) =>onSaved: (value) => _productName = value,
                ),
                TextFormField(
                  decoration: InputDecoration(labelText: 'Product Details'),
                  validator: (value) =>
                      value?.isEmpty ?? true ? 'Required field' : null,
                  onSaved: (value) => _productDetails = value,
                ),
                TextFormField(
                  decoration: InputDecoration(labelText: 'Number of Products'),
                  keyboardType: TextInputType.number,
                  validator: (value) =>
                      value?.isEmpty ?? true ? 'Required field' : null,
                  onSaved: (value) => _numberOfProducts = int.tryParse(value ?? '0'),
                ),
                SizedBox(height: 16),
                ElevatedButton(
                  onPressed: _pickImage,
                  child: Text('Take Product Photo'),
                ),
                if (_imageFile != null)
                  Image.file(
                    File(_imageFile!.path),
                    height: 200,
                    fit: BoxFit.cover,
                  ),
                SizedBox(height: 16),
                ElevatedButton(
                  onPressed: _createShipment,
                  child: Text('Create Shipment'),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

// Add ShipmentList widget for displaying shipments
class ShipmentList extends StatelessWidget {
  final String userId;

  const ShipmentList({Key? key, required this.userId}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return StreamBuilder<QuerySnapshot>(
      stream: FirebaseFirestore.instance
          .collection('shipments')
          .where('senderId', isEqualTo: userId)
          .orderBy('createdAt', descending: true)
          .snapshots(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return Center(child: CircularProgressIndicator());
        }

        if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
          return Center(child: Text('No shipments found'));
        }

        return ListView.builder(
          itemCount: snapshot.data!.docs.length,
          itemBuilder: (context, index) {
            final shipment = ShipmentModel.fromMap({
              'id': snapshot.data!.docs[index].id,
              ...snapshot.data!.docs[index].data() as Map<String, dynamic>,
            });
            return ShipmentCard(shipment: shipment);
          },
        );
      },
    );
  }
}

// Add ShipmentCard widget for displaying individual shipments
class ShipmentCard extends StatelessWidget {
  final ShipmentModel shipment;

  const ShipmentCard({Key? key, required this.shipment}) : super(key: key);

  String _getStatusText(ShipmentStatus status) {
    switch (status) {
      case ShipmentStatus.pending:
        return 'Pending';
      case ShipmentStatus.inTransit:
        return 'In Transit';
      case ShipmentStatus.delivered:
        return 'Delivered';
    }
  }

  Color _getStatusColor(ShipmentStatus status) {
    switch (status) {
      case ShipmentStatus.pending:
        return Colors.orange;
      case ShipmentStatus.inTransit:
        return Colors.blue;
      case ShipmentStatus.delivered:
        return Colors.green;
    }
  }

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: InkWell(
        onTap: () => _showShipmentDetails(context),
        child: Padding(
          padding: EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          shipment.productName,
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        Text('Quantity: ${shipment.numberOfProducts}'),
                      ],
                    ),
                  ),
                  Container(
                    padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                    decoration: BoxDecoration(
                      color: _getStatusColor(shipment.status),
                      borderRadius: BorderRadius.circular(16),
                    ),
                    child: Text(
                      _getStatusText(shipment.status),
                      style: TextStyle(color: Colors.white),
                    ),
                  ),
                ],
              ),
              if (shipment.imageUrl.isNotEmpty)
                Padding(
                  padding: EdgeInsets.symmetric(vertical: 8),
                  child: Image.network(
                    shipment.imageUrl,
                    height: 150,
                    width: double.infinity,
                    fit: BoxFit.cover,
                  ),
                ),
            ],
          ),
        ),
      ),
    );
  }

  void _showShipmentDetails(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => ShipmentDetailsDialog(shipment: shipment),
    );
  }
}

// Add ShipmentDetailsDialog for showing full shipment details
class ShipmentDetailsDialog extends StatelessWidget {
  final ShipmentModel shipment;

  const ShipmentDetailsDialog({Key? key, required this.shipment})
      : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Dialog(
      child: SingleChildScrollView(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            if (shipment.imageUrl.isNotEmpty)
              Image.network(
                shipment.imageUrl,
                height: 200,
                width: double.infinity,
                fit: BoxFit.cover,
              ),
            Padding(
              padding: EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Shipment Details',
                    style: TextStyle(
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  SizedBox(height: 16),
                  _detailRow('Product Name', shipment.productName),
                  _detailRow('Details', shipment.productDetails),
                  _detailRow('Quantity', shipment.numberOfProducts.toString()),
                  _detailRow('Shipping Address', shipment.shippingAddress),
                  _detailRow(
                    'Status',
                    shipment.status.toString().split('.').last.toUpperCase(),
                  ),
                  SizedBox(height: 16),
                  Container(
                    height: 200,
                    child: FlutterMap(
                      options: MapOptions(
                        center: LatLng(shipment.latitude, shipment.longitude),
                        zoom: 15.0,
                      ),
                      children: [
                        TileLayer(
                          urlTemplate:
                              'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
                          subdomains: ['a', 'b', 'c'],
                        ),
                        MarkerLayer(
                          markers: [
                            Marker(
                              point:
                                  LatLng(shipment.latitude, shipment.longitude),
                              builder: (context) => Icon(
                                Icons.location_on,
                                color: Colors.red,
                                size: 30,
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _detailRow(String label, String value) {
    return Padding(
      padding: EdgeInsets.symmetric(vertical: 4),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 120,
            child: Text(
              '$label:',
              style: TextStyle(
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
          Expanded(
            child: Text(value),
          ),
        ],
      ),
    );
  }
}

// Add real-time shipment tracking functionality
class ShipmentTracker {
  static Stream<List<ShipmentModel>> trackShipments(String userId) {
    return FirebaseFirestore.instance
        .collection('shipments')
        .where('senderId', isEqualTo: userId)
        .snapshots()
        .map((snapshot) {
      return snapshot.docs
          .map((doc) => ShipmentModel.fromMap({
                'id': doc.id,
                ...doc.data(),
              }))
          .toList();
    });
  }

  static Future<void> updateShipmentStatus(
      String shipmentId, ShipmentStatus newStatus) async {
    await FirebaseFirestore.instance
        .collection('shipments')
        .doc(shipmentId)
        .update({
      'status': newStatus.index,
    });
  }
}

// Update UserDashboard to include shipment tracking
class UserDashboardMap extends StatelessWidget {
  final String userId;
  final MapController mapController;

  const UserDashboardMap({
    Key? key,
    required this.userId,
    required this.mapController,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return StreamBuilder<List<ShipmentModel>>(
      stream: ShipmentTracker.trackShipments(userId),
      builder: (context, snapshot) {
        if (!snapshot.hasData) {
          return Center(child: CircularProgressIndicator());
        }

        final shipments = snapshot.data!;
        final markers = shipments.map((shipment) {
          return Marker(
            point: LatLng(shipment.latitude, shipment.longitude),
            builder: (context) => GestureDetector(
              onTap: () => _showShipmentDetails(context, shipment),
              child: Icon(
                Icons.location_on,
                color: _getStatusColor(shipment.status),
                size: 30,
              ),
            ),
          );
        }).toList();

        return FlutterMap(
          mapController: mapController,
          options: MapOptions(
            center: LatLng(13.7563, 100.5018), // Bangkok coordinates
            zoom: 10.0,
          ),
          children: [
            TileLayer(
              urlTemplate: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
              subdomains: ['a', 'b', 'c'],
            ),
            MarkerLayer(markers: markers),
          ],
        );
      },
    );
  }

  void _showShipmentDetails(BuildContext context, ShipmentModel shipment) {
    showDialog(
      context: context,
      builder: (context) => ShipmentDetailsDialog(shipment: shipment),
    );
  }

  Color _getStatusColor(ShipmentStatus status) {
    switch (status) {
      case ShipmentStatus.pending:
        return Colors.orange;
      case ShipmentStatus.inTransit:
        return Colors.blue;
      case ShipmentStatus.delivered:
        return Colors.green;
    }
  }
}